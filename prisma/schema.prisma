generator client {
  provider = "prisma-client-js"
  binaryTargets = ["rhel-openssl-1.0.x", "native"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String      @unique
  password   String
  phone      String?     @unique
  gender     String?     @db.VarChar(1)
  birthday   DateTime?
  profilePicture String?
  coverPicture String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?
  disabledAt DateTime?
  address    Address?
  comments   Comment[]
  posts      Post[]
  resetToken ResetToken?
  likes Like[]
  bio String?
  addressFrom String?
  friendRequests FriendRequest[] @relation("User")
  friendRequestSent FriendRequest[] @relation("Requester")
  notifications Notification[] @relation("Recipient")
  notificationsSent Notification[] @relation("Sender")
}

model Address {
  id           Int       @id @default(autoincrement())
  addressLine1 String
  addressLine2 String?
  country      String
  postalCode   String
  province     String
  userId       Int       @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  user         User      @relation(fields: [userId], references: [id])
}

model Post {
  id           Int       @id @default(autoincrement())
  authorId     Int
  featureImage String?
  description  String
  shares       Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  likes        Like[]
  comments     Comment[]
  notifications Notification[]
  author       User      @relation(fields: [authorId], references: [id])
}

model Comment {
  postId    Int
  comment   String
  authorId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  id        Int       @id @default(autoincrement())
  author    User      @relation(fields: [authorId], references: [id])
  post      Post      @relation(fields: [postId], references: [id])
  replies   Comment[] @relation("Replies")
  repliesRelation Comment[] @relation("Replies")
}

model ResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model TemporaryUser {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  email     String @unique
  gender    String @db.VarChar(1)
  password  String
  retrieveToken String @unique
}

model Like {
  id Int @id @default(autoincrement())
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime?
}

model FriendRequest {
  id Int @id @default(autoincrement())
  user User @relation("User", fields: [userId], references: [id])
  userId Int
  requester User @relation("Requester", fields: [requesterId], references: [id])
  requesterId Int
  status String @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime?
}

model Notification {
  id Int @id @default(autoincrement())
  description String
  recipient User @relation("Recipient", fields: [recipientId], references: [id])
  recipientId Int
  sender User @relation("Sender", fields: [senderId], references: [id])
  senderId Int
  type String
  isRead Boolean @default(false)
  post Post @relation(fields: [postId], references: [id])
  postId Int
  createdAt DateTime
  updatedAt DateTime?
}
